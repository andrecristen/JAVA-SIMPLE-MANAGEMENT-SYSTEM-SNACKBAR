package View;

import Controller.ArquivoController;
import Controller.ClienteController;
import Controller.Constantes;
import Model.Cliente;
import Model.Contato;
import Model.Endereco;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class EditarCliente extends javax.swing.JDialog {
    Constantes cons = new Constantes();
    Cliente cliente;
    /**
     * Creates new form EditarCliente
     */
    public EditarCliente(java.awt.Frame parent, boolean modal, Cliente cliente) {
        super(parent, modal);
        initComponents();
        this.setCliente(cliente);
        loadModelToView(cliente);
    }

    public void setCliente(Cliente cliente) {
        this.cliente = cliente;
    }
    
     private void loadModelToView(Cliente cliente) {
        this.codigoClienteInput.setText(cliente.getCodigo());
        this.nomeClienteInput.setText(cliente.getNome());
        this.sobrenomeClienterInput.setText(cliente.getSobrenome());
        this.loginClienteInput.setText(cliente.getLogin());
        this.senhaClienteInput.setText(cliente.getSenha());
        this.cpfClienteInput.setText(cliente.getCpf());
        this.nascimentoClienteInput.setText(cliente.getDataNascimento());
        
        DefaultTableModel tabelaEndereco = (DefaultTableModel) tableEnderecosCliente.getModel();
        DefaultTableModel tabelaContato = (DefaultTableModel) tableContatosCliente.getModel();
        ArquivoController controller = new ArquivoController();
        
        ArrayList<Endereco> enderecos = controller.getEnderecosByCodigoPai(cons.getPATH_PART_INITIAL()+cons.getENDERECO_CLIENTE(), cliente.getCodigo(), cons.getTIPO_CLIENTE());
        for(Endereco endereco : enderecos){
            tabelaEndereco.addRow(new Object[]{endereco.getCodigo(), endereco.getRua(), endereco.getBairro(), endereco.getCidade(), endereco.getEstado(), endereco.getComplemento(), endereco.getReferencia()});
        }
        ArrayList<Contato> contatos = controller.getContatosByCodigoPai(cons.getPATH_PART_INITIAL()+cons.getCONTATO_CLIENTE(), cliente.getCodigo(), cons.getTIPO_CLIENTE());
        for(Contato contato : contatos){
            tabelaContato.addRow(new Object[]{contato.getCodigo(), contato.getTipo(), contato.getConteudo()});
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        nomeClienteInput = new javax.swing.JTextField();
        senhaClienteInput = new javax.swing.JPasswordField();
        cpfLabel = new javax.swing.JLabel();
        cpfClienteInput = new javax.swing.JFormattedTextField();
        nascimentoLabel = new javax.swing.JLabel();
        sobrenomeLabel = new javax.swing.JLabel();
        sobrenomeClienterInput = new javax.swing.JTextField();
        addContatoButton = new javax.swing.JButton();
        addEnderecoButton = new javax.swing.JButton();
        confirmarEdicaoCliente = new javax.swing.JButton();
        cancelarCadastroCliente2 = new javax.swing.JButton();
        separadorFooter = new javax.swing.JSeparator();
        nomeLabel = new javax.swing.JLabel();
        loginLabel = new javax.swing.JLabel();
        senhaLabel = new javax.swing.JLabel();
        loginClienteInput = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableContatosCliente = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableEnderecosCliente = new javax.swing.JTable();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        removeContatoCliente = new javax.swing.JButton();
        removeEnderecoCliente = new javax.swing.JButton();
        codigoLabel = new javax.swing.JLabel();
        codigoClienteInput = new javax.swing.JTextField();
        nascimentoClienteInput = new javax.swing.JFormattedTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        cpfLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cpfLabel.setText("CPF:*");

        try {
            cpfClienteInput.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###.###.###-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        nascimentoLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        nascimentoLabel.setText("Nascimento:*");

        sobrenomeLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        sobrenomeLabel.setText("Sobrenome*:");

        addContatoButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/addIcon.png"))); // NOI18N
        addContatoButton.setText("Adicionar Contato");
        addContatoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addContatoButtonActionPerformed(evt);
            }
        });

        addEnderecoButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/addIcon.png"))); // NOI18N
        addEnderecoButton.setText("Adicionar Endereço");
        addEnderecoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addEnderecoButtonActionPerformed(evt);
            }
        });

        confirmarEdicaoCliente.setBackground(new java.awt.Color(0, 153, 0));
        confirmarEdicaoCliente.setText("Editar");
        confirmarEdicaoCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmarEdicaoClienteActionPerformed(evt);
            }
        });

        cancelarCadastroCliente2.setBackground(new java.awt.Color(255, 51, 51));
        cancelarCadastroCliente2.setText("Cancelar");
        cancelarCadastroCliente2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarCadastroCliente2ActionPerformed(evt);
            }
        });

        nomeLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        nomeLabel.setText("Nome:*");

        loginLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        loginLabel.setText("Login:*");

        senhaLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        senhaLabel.setText("Senha:*");

        tableContatosCliente.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Tipo", "Conteudo"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableContatosCliente);

        tableEnderecosCliente.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Rua", "Bairro", "Cidade", "Estado", "Complemento", "Referência"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tableEnderecosCliente);

        jSeparator1.setToolTipText("Ddados de contato");

        jSeparator2.setToolTipText("Ddados de contato");

        removeContatoCliente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/removeIcon.png"))); // NOI18N
        removeContatoCliente.setText("Remover Linha Selecionada");
        removeContatoCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeContatoClienteActionPerformed(evt);
            }
        });

        removeEnderecoCliente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/removeIcon.png"))); // NOI18N
        removeEnderecoCliente.setText("Remover Linha Selecionada");
        removeEnderecoCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeEnderecoClienteActionPerformed(evt);
            }
        });

        codigoLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        codigoLabel.setText("Codigo:*");

        codigoClienteInput.setEditable(false);
        codigoClienteInput.setBackground(new java.awt.Color(206, 211, 208));

        try {
            nascimentoClienteInput.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(separadorFooter)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(addContatoButton)
                                .addGap(18, 18, 18)
                                .addComponent(removeContatoCliente))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(addEnderecoButton)
                                .addGap(18, 18, 18)
                                .addComponent(removeEnderecoCliente))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 940, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 941, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(jSeparator2)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(cancelarCadastroCliente2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(confirmarEdicaoCliente)
                        .addGap(12, 12, 12))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(cpfLabel)
                                    .addComponent(nascimentoLabel)
                                    .addComponent(senhaLabel)
                                    .addComponent(loginLabel)
                                    .addComponent(sobrenomeLabel))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(loginClienteInput, javax.swing.GroupLayout.DEFAULT_SIZE, 785, Short.MAX_VALUE)
                                    .addComponent(cpfClienteInput)
                                    .addComponent(senhaClienteInput, javax.swing.GroupLayout.DEFAULT_SIZE, 785, Short.MAX_VALUE)
                                    .addComponent(sobrenomeClienterInput, javax.swing.GroupLayout.DEFAULT_SIZE, 785, Short.MAX_VALUE)
                                    .addComponent(nascimentoClienteInput)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(codigoLabel)
                                    .addComponent(nomeLabel))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(nomeClienteInput, javax.swing.GroupLayout.PREFERRED_SIZE, 785, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(codigoClienteInput, javax.swing.GroupLayout.PREFERRED_SIZE, 785, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(60, 60, 60))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(codigoClienteInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(codigoLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nomeLabel)
                    .addComponent(nomeClienteInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sobrenomeLabel)
                    .addComponent(sobrenomeClienterInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(loginLabel)
                    .addComponent(loginClienteInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(senhaLabel)
                    .addComponent(senhaClienteInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cpfLabel)
                    .addComponent(cpfClienteInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nascimentoLabel)
                    .addComponent(nascimentoClienteInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(addContatoButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(removeContatoCliente))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addEnderecoButton)
                    .addComponent(removeEnderecoCliente))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(separadorFooter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelarCadastroCliente2)
                    .addComponent(confirmarEdicaoCliente))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addContatoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addContatoButtonActionPerformed
        DefaultTableModel tabela = (DefaultTableModel) tableContatosCliente.getModel();
        if (tabela.getRowCount() < 10) {
            tabela.addRow(new Object[]{"", "", ""});
        } else {
            JOptionPane.showMessageDialog(null, "Limite de 10 Contatos por cliente");
        }
    }//GEN-LAST:event_addContatoButtonActionPerformed

    private void addEnderecoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addEnderecoButtonActionPerformed
        DefaultTableModel tabela = (DefaultTableModel) tableEnderecosCliente.getModel();
        if (tabela.getRowCount() < 5) {
            tabela.addRow(new Object[]{"", "", "", "", "", "", ""});
        } else {
            JOptionPane.showMessageDialog(null, "Limite de 5 Endereços por cliente");
        }
    }//GEN-LAST:event_addEnderecoButtonActionPerformed

    private void confirmarEdicaoClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmarEdicaoClienteActionPerformed
        //Vamos Cadastrar um novo fornecedor;
        boolean valido = true;
        ClienteController controller = new ClienteController();
        String codigo = codigoClienteInput.getText();
        if (codigo.trim().equals("")) {
            valido = false;
        }
        String nome = nomeClienteInput.getText();
        if (nome.trim().equals("")) {
            valido = false;
        }
        String login = loginClienteInput.getText();
        if (login.trim().equals("")) {
            valido = false;
        }
        String senha = senhaClienteInput.getText();
        if (senha.trim().equals("")) {
            valido = false;
        }
        String cpf = cpfClienteInput.getText();
        if (cpf.trim().equals("")) {
            valido = false;
        }
        String nascimento = nascimentoClienteInput.getText();
        if (nascimento.trim().equals("")) {
            valido = false;
        }
        String sobrenome = sobrenomeClienterInput.getText();
        if (sobrenome.trim().equals("")) {
            valido = false;
        }
        DefaultTableModel tabelaEndereco = (DefaultTableModel) tableEnderecosCliente.getModel();
        String[][] enderecos = new String[tabelaEndereco.getRowCount()][7];
        //Vamos buscar nossas informacoes da tabela, cada count representa uma row e 0,1,2...5 sao as colunas

        for (int row = 0; row < tabelaEndereco.getRowCount(); row++) {
            if (tabelaEndereco.getValueAt(row, 0) != "") {
                enderecos[row][0] = tabelaEndereco.getValueAt(row, 0).toString();
            } else {
                enderecos[row][0] = "campoVazio";
            }
            if (tabelaEndereco.getValueAt(row, 1) != "") {
                enderecos[row][1] = tabelaEndereco.getValueAt(row, 1).toString();
            } else {
                enderecos[row][1] = "campoVazio";
            }
            if (tabelaEndereco.getValueAt(row, 2) != "") {
                enderecos[row][2] = tabelaEndereco.getValueAt(row, 2).toString();
            } else {
                enderecos[row][2] = "campoVazio";
            }
            if (tabelaEndereco.getValueAt(row, 3) != "") {
                enderecos[row][3] = tabelaEndereco.getValueAt(row, 3).toString();
            } else {
                enderecos[row][3] = "campoVazio";
            }
            if (tabelaEndereco.getValueAt(row, 4) != "") {
                enderecos[row][4] = tabelaEndereco.getValueAt(row, 4).toString();
            } else {
                enderecos[row][4] = "campoVazio";
            }
            if (tabelaEndereco.getValueAt(row, 5) != "") {
                enderecos[row][5] = tabelaEndereco.getValueAt(row, 5).toString();
            } else {
                enderecos[row][5] = "campoVazio";
            }
            if (tabelaEndereco.getValueAt(row, 6) != "") {
                enderecos[row][6] = tabelaEndereco.getValueAt(row, 6).toString();
            } else {
                enderecos[row][6] = "campoVazio";
            }
        }

        DefaultTableModel tabelaContatos = (DefaultTableModel) tableContatosCliente.getModel();
        String[][] contatos = new String[tabelaContatos.getRowCount()][3];
        //Vamos buscar nossas informacoes da tabela, cada count representa uma row e 0,1,2...5 sao as colunas
        if (valido) {
            for (int row2 = 0; row2 < tabelaContatos.getRowCount(); row2++) {
                if (tabelaContatos.getValueAt(row2, 0) != "") {
                    contatos[row2][0] = tabelaContatos.getValueAt(row2, 0).toString();
                } else {
                    contatos[row2][0] = "campoVazio";
                }
                if (tabelaContatos.getValueAt(row2, 1) != "") {
                    contatos[row2][1] = tabelaContatos.getValueAt(row2, 1).toString();
                } else {
                    contatos[row2][1] = "campoVazio";
                }
                if (tabelaContatos.getValueAt(row2, 2) != "") {
                    contatos[row2][2] = tabelaContatos.getValueAt(row2, 2).toString();
                } else {
                    contatos[row2][2] = "campoVazio";
                }
            }
        }

        if (valido) {
            String mensagem = controller.editarCliente(codigo, nome, sobrenome, login, senha, cpf, nascimento, enderecos, contatos);
            JOptionPane.showMessageDialog(null, mensagem);
            this.setVisible(false);
        } else {
            JOptionPane.showMessageDialog(null, "Campos obrigatórios não preenchidos, verifique o cadastro");
        }
    }//GEN-LAST:event_confirmarEdicaoClienteActionPerformed

    private void cancelarCadastroCliente2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarCadastroCliente2ActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_cancelarCadastroCliente2ActionPerformed

    private void removeContatoClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeContatoClienteActionPerformed
        DefaultTableModel model = (DefaultTableModel) tableContatosCliente.getModel();
        try {
            int SelectedRowIndex = tableContatosCliente.getSelectedRow();
            int SelectedsRows = tableContatosCliente.getSelectedRowCount();
            if (SelectedsRows == 1) {
                model.removeRow(SelectedRowIndex);
            } else if (SelectedsRows > 1) {
                JOptionPane.showMessageDialog(null, "Para garantir uma exclusão mais segura, selecione apenas um linha por vez");
            } else {
                JOptionPane.showMessageDialog(null, "Selecione uma linha para exclusão");
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
    }//GEN-LAST:event_removeContatoClienteActionPerformed

    private void removeEnderecoClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeEnderecoClienteActionPerformed
        DefaultTableModel model = (DefaultTableModel) tableEnderecosCliente.getModel();
        try {
            int SelectedRowIndex = tableEnderecosCliente.getSelectedRow();
            int SelectedsRows = tableEnderecosCliente.getSelectedRowCount();
            if (SelectedsRows == 1) {
                model.removeRow(SelectedRowIndex);
            } else if (SelectedsRows > 1) {
                JOptionPane.showMessageDialog(null, "Para garantir uma exclusão mais segura, selecione apenas um linha por vez");
            } else {
                JOptionPane.showMessageDialog(null, "Selecione uma linha para exclusão");
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex);
        }
    }//GEN-LAST:event_removeEnderecoClienteActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EditarCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EditarCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EditarCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EditarCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                EditarCliente dialog = new EditarCliente(new javax.swing.JFrame(), true, new Cliente());
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addContatoButton;
    private javax.swing.JButton addEnderecoButton;
    private javax.swing.JButton cancelarCadastroCliente2;
    private javax.swing.JTextField codigoClienteInput;
    private javax.swing.JLabel codigoLabel;
    private javax.swing.JButton confirmarEdicaoCliente;
    private javax.swing.JFormattedTextField cpfClienteInput;
    private javax.swing.JLabel cpfLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextField loginClienteInput;
    private javax.swing.JLabel loginLabel;
    private javax.swing.JFormattedTextField nascimentoClienteInput;
    private javax.swing.JLabel nascimentoLabel;
    private javax.swing.JTextField nomeClienteInput;
    private javax.swing.JLabel nomeLabel;
    private javax.swing.JButton removeContatoCliente;
    private javax.swing.JButton removeEnderecoCliente;
    private javax.swing.JPasswordField senhaClienteInput;
    private javax.swing.JLabel senhaLabel;
    private javax.swing.JSeparator separadorFooter;
    private javax.swing.JTextField sobrenomeClienterInput;
    private javax.swing.JLabel sobrenomeLabel;
    private javax.swing.JTable tableContatosCliente;
    private javax.swing.JTable tableEnderecosCliente;
    // End of variables declaration//GEN-END:variables
}
